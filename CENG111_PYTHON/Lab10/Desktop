{"cells":[{"cell_type":"markdown","metadata":{"id":"f5AAtZ3A2NkD"},"source":["# LAB10\n","\n","In this lab, we will look at;\n","\n","- Module Reloading\n","- Python Debugger (PDB)\n","- Advanced Iteration Examples\n","\n","## Reload\n","\n","To reload a module you've already imported:\n","\n","```python\n","import importlib\n","importlib.reload(<module-name>)\n","```\n","\n","# Python Debugger (PDB)\n","\n","Detailed information can be found on [the documentation](https://docs.python.org/3.6/library/pdb.html)\n","\n","## Debugger Functions\n","\n","- pdb.run(STATEMENT): it runs the STATEMENT under debugger's control\n","- pdb.set_trace(): Enters debugger mode\n","\n","## Debugger Commands\n","\n","- h (help): prints available commands\n","- s (step): it runs the row we're at and stops. If we are calling a function it stop in function's first row\n","- n (next): it runs the row and continues.\n","- p EXPRESSION: Evaluates EXPRESSION and prints it to the terminal. We can use this to see variables during debugging\n","- r (return): It continues until the function we're at returns\n","- q (quit): stops pdb\n","\n","We can use debugging in two ways;\n","\n","1. using **pdb.run()** after we run Python interpreter\n","2. We can put **set_trace()** into our code where we want trace to begin.\n","\n","### Debugger Examples\n","\n","Let's write a script in a file named example1.py and try doing **pdb.run()**;"]},{"cell_type":"code","execution_count":40,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1703024314570,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"m0gWb0AC2NkF"},"outputs":[],"source":["def isOrdered(l):\n","    for i in range(len(l)):\n","        if l[i]>l[i+1]:\n","            return False\n","    \n","    return True"]},{"cell_type":"markdown","metadata":{"id":"CfubpGOG2NkG"},"source":["Try opening interpreter and try to run pdb with it."]},{"cell_type":"markdown","metadata":{"id":"-d2_OUhw2NkG"},"source":["```python\n",">>> import example1\n",">>> example1.is_ordered([4, 2, 3])\n","False\n",">>> example1.is_ordered([1, 2, 3])\n","Traceback (most recent call last):\n","  File \"<stdin>\", line 1, in <module>\n","  File \"example1.py\", line 4, in is_ordered\n","    if ( l[i] > l[i+1] ):\n","IndexError: list index out of range\n",">>> import pdb\n",">>> pdb.run(\"example1.is_ordered([1, 2, 3])\")\n","> <string>(1)<module>()\n","(Pdb) s\n","--Call--\n","> .../example1.py(2)is_ordered()       # Script name, row number, function name\n","-> def is_ordered(l):                  # Row which is going to be run\n","(Pdb) n\n","> .../example1.py(3)is_ordered()\n","-> for i in range(len(l)):\n","(Pdb) n\n","> .../example1.py(4)is_ordered()\n","-> if ( l[i] > l[i+1] ):\n","(Pdb) n\n","> .../example1.py(3)is_ordered()\n","-> for i in range(len(l)):\n","(Pdb) n\n","> .../example1.py(4)is_ordered()\n","-> if ( l[i] > l[i+1] ):\n","(Pdb) n\n","> .../example1.py(3)is_ordered()\n","-> for i in range(len(l)):\n","(Pdb) n\n","> .../example1.py(4)is_ordered()\n","-> if ( l[i] > l[i+1] ):\n","(Pdb) n\n","IndexError: 'list index out of range'\n","> .../example1.py(4)is_ordered()\n","-> if ( l[i] > l[i+1] ):\n","(Pdb) p i, len(l)\n","(2, 3)              \n","```"]},{"cell_type":"markdown","metadata":{"id":"OY7yo_Lp2NkH"},"source":["Now let's add ```pdb.setTrace()``` to example1's code and to make example2.py"]},{"cell_type":"code","execution_count":41,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1703024314571,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"5aCjz-OC2NkH"},"outputs":[{"name":"stdout","output_type":"stream","text":["--Return--\n","None\n","> \u001b[0;32m/tmp/ipykernel_593934/2522841380.py\u001b[0m(9)\u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n","\u001b[0;32m      6 \u001b[0;31m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0m\u001b[0;32m      7 \u001b[0;31m    \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0m\u001b[0;32m      8 \u001b[0;31m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0m\u001b[0;32m----> 9 \u001b[0;31m\u001b[0mpdb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_trace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0m\u001b[0;32m     10 \u001b[0;31m\u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0misOrdered\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0m\n","*** NameError: name 'ghjkf' is not defined\n","*** NameError: name 'ghjkf' is not defined\n","*** NameError: name 'ghjkf' is not defined\n","*** NameError: name 'ghjkf' is not defined\n","*** NameError: name 'ghjkf' is not defined\n","*** NameError: name 'ghjkf' is not defined\n","*** NameError: name 'ghjkf' is not defined\n"]}],"source":["import pdb\n","def isOrdered(l):\n","    for i in range(len(l)):\n","        if l[i]>l[i+1]:\n","            return False\n","    \n","    return True\n","\n","pdb.set_trace()\n","print(isOrdered([1,2,3]))"]},{"cell_type":"markdown","metadata":{"id":"DepG8x8l2NkH"},"source":["Now open terminal and try to run this script, you will see pdb opening;\n","\n","```python\n","python3 example2.py\n","> .../example2.py(10)<module>()\n","-> print is_ordered([1, 2, 3])\n","(Pdb) s\n","--Call--\n","> .../example2.py(3)is_ordered()\n","-> def is_ordered(l):\n","(Pdb) n\n","> .../example2.py(4)is_ordered()\n","-> for i in range(len(l)):\n","(Pdb)\n","> .../example2.py(5)is_ordered()\n","-> if ( l[i] > l[i+1] ):\n","(Pdb)\n","> .../example2.py(4)is_ordered()\n","-> for i in range(len(l)):\n","(Pdb)\n","> .../example2.py(5)is_ordered()\n","-> if ( l[i] > l[i+1] ):\n","(Pdb)\n","> .../example2.py(4)is_ordered()\n","-> for i in range(len(l)):\n","(Pdb)\n","> .../example2.py(5)is_ordered()\n","-> if ( l[i] > l[i+1] ):\n","(Pdb)\n","IndexError: 'list index out of range'\n","> .../example2.py(5)is_ordered()\n","-> if ( l[i] > l[i+1] ):\n","(Pdb) p i, len(l)\n","(2, 3)\n","\n","```"]},{"cell_type":"markdown","metadata":{"id":"SmMP7RUh2NkH"},"source":["## Error Handling\n","\n","There are 3 types of errors:\n","\n","- Syntax Errors\n","- Run-Time Errors\n","- Logical Errors\n","\n","You can check [this link](https://pp4e-book.github.io/chapters/ch9_error_handling.html) for information about error types and how to handle them."]},{"cell_type":"markdown","metadata":{"id":"g90Sls_A3o5I"},"source":["### Syntax Error Example 1\n","\n","It might be a missing semicolon"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1703024317171,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"A87sF_FQ3wKF"},"outputs":[{"ename":"SyntaxError","evalue":"expected ':' (3684423057.py, line 1)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_593934/3684423057.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    if 10>2\u001b[0m\n\u001b[0m           ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m expected ':'\n"]}],"source":["if 10>2\n","    print(\"smaller\")"]},{"cell_type":"markdown","metadata":{"id":"LBd_3Cpp34P0"},"source":["### Syntax Error Example 2\n","\n","Sometimes, parantheses are not balanced."]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":293,"status":"ok","timestamp":1703024319696,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"CVbfiHCp3-oH"},"outputs":[{"ename":"SyntaxError","evalue":"incomplete input (1575126437.py, line 1)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_593934/1575126437.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    m = (4*float(input())\u001b[0m\n\u001b[0m                         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m incomplete input\n"]}],"source":["m = (4*float(input())"]},{"cell_type":"markdown","metadata":{"id":"PynpabgP4EMF"},"source":["### Syntax Error Example 3\n","\n","Sometimes, there are indentation errors"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1703024321143,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"tqjlFr5F4K34"},"outputs":[{"ename":"IndentationError","evalue":"unexpected indent (1672555491.py, line 3)","output_type":"error","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipykernel_593934/1672555491.py\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    print(\"x is: \",x)\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"]}],"source":["for i in range(5):\n","    x=i*10\n","        print(\"x is: \",x)"]},{"cell_type":"markdown","metadata":{"id":"1CAYqvhs4T9f"},"source":["### Type Error\n","\n","Usually happens when we use some operations that are not defined in that data type"]},{"cell_type":"markdown","metadata":{"id":"x9vrWie_4cb1"},"source":["### Type Error Example 1\n","\n","Using \"+\" operator on strings and integers"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":418,"status":"ok","timestamp":1703024324633,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"j52KNp874iPf"},"outputs":[{"ename":"TypeError","evalue":"can only concatenate str (not \"int\") to str","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_593934/777353386.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mstringEx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"This is and example string\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstringEx\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"int\") to str"]}],"source":["stringEx=\"This is and example string\"\n","print(stringEx+10)"]},{"cell_type":"markdown","metadata":{"id":"MSb5CSZw4mvY"},"source":["### Type Error Example 2\n","\n","When we use subscript operator on non container types."]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1703024326457,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"VfL0eqHn4wSx"},"outputs":[{"ename":"TypeError","evalue":"'int' object is not subscriptable","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_593934/165705241.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: 'int' object is not subscriptable"]}],"source":["x=10\n","print(x[5])"]},{"cell_type":"markdown","metadata":{"id":"GECnmjOZ4y-E"},"source":["### Type Error Example 3\n","\n","When we use comparison operators where we should not"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":262,"status":"ok","timestamp":1703024330989,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"mYlxMeCVGK_Z"},"outputs":[{"ename":"TypeError","evalue":"'<' not supported between instances of 'int' and 'str'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_593934/2540251499.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"str\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mx\u001b[0m\u001b[0;34m<\u001b[0m\u001b[0ms\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: '<' not supported between instances of 'int' and 'str'"]}],"source":["x=100\n","s=\"str\"\n","x<s"]},{"cell_type":"markdown","metadata":{"id":"Rz9ocrcFGRuJ"},"source":["### Run-Time Errors\n","\n","Occurs during program execution\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1703024333859,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"lnAcAXo6GiVH"},"outputs":[{"ename":"ZeroDivisionError","evalue":"integer division or modulo by zero","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m/tmp/ipykernel_593934/2254194369.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1000\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/tmp/ipykernel_593934/2254194369.py\u001b[0m in \u001b[0;36mcount\u001b[0;34m(m, n)\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0msum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m         \u001b[0;32mif\u001b[0m \u001b[0misDivisible\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m             \u001b[0msum\u001b[0m\u001b[0;34m+=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/tmp/ipykernel_593934/2254194369.py\u001b[0m in \u001b[0;36misDivisible\u001b[0;34m(k, l)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0misDivisible\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ml\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m%\u001b[0m\u001b[0ml\u001b[0m\u001b[0;34m==\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0msum\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mZeroDivisionError\u001b[0m: integer division or modulo by zero"]}],"source":["def isDivisible(k, l):\n","    return k%l==0\n","def count(m, n):\n","    sum=0\n","    for i in range(1, m):\n","        if isDivisible(i, n):\n","            sum+=1\n","\n","    return sum\n","\n","count(1000,0)"]},{"cell_type":"markdown","metadata":{"id":"W-8DaFe6Gpmk"},"source":["### Some Run-Time Exceptions\n","\n","- **KeyboardInterrupt:** User presses `Ctrl-C`; not an error but user intervention\n","- **ZeroDivisionError:** Right hand side of `/` or `%` is `0`\n","- **AttributeError:** Object/Class does not have a member\n","- **EOFError:**  `input()` function gets End-of-input by user\n","- **IndexError:** Container index is not valid\n","- **KeyError:** Dict has no such key\n","- **FileNotFoundError:** The target file of `open()` does not exist.\n","- **TypeError:** Wrong operand or parameter types, or wrong number of parameters for functions\n","- **ValueError:** The given value has correct type but the operation is not supported for the given value.\n","\n","### Logical Errors\n","\n","Normally happens from little typos. Python does not yield an error/exception but our code also does not work as intended.\n","\n","### Example1"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":414,"status":"ok","timestamp":1703024338467,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"CzoaKgbJHl-s"},"outputs":[{"name":"stdout","output_type":"stream","text":["2.0\n"]}],"source":["n = 10\n","m = n/n+1\n","print(m)"]},{"cell_type":"markdown","metadata":{"id":"CFILL2WvHxi-"},"source":["### Example2"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":296,"status":"ok","timestamp":1703024341069,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"JgpyPKP2Hv9G"},"outputs":[{"name":"stdout","output_type":"stream","text":["10\n"]}],"source":["globalVar=10\n","def changeGlobal(x):\n","    var=x**2\n","    globalVar=0\n","    if globalVar!=var:\n","        globalVar=var\n","\n","changeGlobal(102)\n","print(globalVar)"]},{"cell_type":"markdown","metadata":{"id":"yDCvQs5oH65G"},"source":["## Exceptions\n","\n","When any error occurs, an exception is raised. We can control the program using `try` and `except` keywords.\n","\n","\n","### Exception Example"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1703024345669,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"eMO8T9oJIJyA"},"outputs":[{"name":"stdout","output_type":"stream","text":["1\n","10\n","We cannot divide by 0\n"]}],"source":["import math\n","\n","def exceptionControl():\n","    aList=[1,2,3]\n","    aDict={'Ali':10, 'Veli':20, 'Deli':30}\n","\n","    try:\n","        m = int(input('Give a number: '))\n","        print(aList[m])\n","\n","        n=input('Give a name: ')\n","        print(aDict[n])\n","\n","        x = float(input('Give a float: '))\n","        y=math.sqrt(x)\n","\n","        y=10/x\n","    except IndexError:\n","        print(\"Wrong list index\")\n","    except KeyError:\n","        print(\"Dict does not have that key\")\n","    except ValueError:\n","        print(\"Square root does not work with negative numbers\")\n","    except ZeroDivisionError:\n","        print(\"We cannot divide by 0\")\n","    except:\n","        print(\"An unknown error\")\n","\n","exceptionControl()"]},{"cell_type":"markdown","metadata":{"id":"rrM3vlS-IZnz"},"source":["## Basic File Handling (Reading a file line by line)\n","\n","Let's download a comma separated value file (csv) from odtüclass named `\"hurricanes.csv\"`.\n","\n","In this file, there are numbers of hurricanes for each month from 2005 to 2015. Let's write a function that reads this file and gives us hurricane count between `[2005, 2015]` for parameter `month`. The function will be:\n","\n","```\n","def hurricane(fileName, month):\n","  # here goes the code\n","```\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":2,"status":"ok","timestamp":1703024349414,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"w4L8E2WtJR5E"},"outputs":[{"data":{"text/plain":["50"]},"execution_count":31,"metadata":{},"output_type":"execute_result"}],"source":["def hurricane(fileName, month):\n","    #open the file\n","    csvData = open(fileName, 'r')\n","    csvLines = csvData.readlines()\n","    result=0\n","    \n","    for i in range(1, len(csvLines)):\n","        line = csvLines[i]\n","        line=line.strip()\n","        lineTokens=line.split(',')\n","        lineMonth=lineTokens[0]\n","        if lineMonth == month:\n","            for j in range(2,13):\n","                result+=int(lineTokens[j])\n","    return result\n","hurricane('hurricanes.csv', 'Sep') "]},{"cell_type":"markdown","metadata":{"id":"FXeADOBr2NkJ"},"source":["# Some Advanced Iteration Examples\n","\n","## Binary Search\n","\n","Write a function called ```binary_search_iterative(li, left, right, key)``` where;\n","\n","- li is a list of numbers sorted in ascending order\n","- key is the element that we are searching for\n","\n","If we find the element, just return its index, otherwise return -1\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1703024353473,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"9vBSvlwX2NkJ"},"outputs":[{"name":"stdout","output_type":"stream","text":["2\n"]}],"source":["def binarySearch(li, key):\n","    left=0\n","    right=len(li)-1\n","    while True:\n","        if left>right:\n","            return -1\n","        \n","        mid = (left+right)//2\n","\n","        if li[mid]==key:\n","            return mid\n","        elif li[mid]>key:\n","            right=mid-1\n","        else:\n","            left = mid + 1\n","\n","print(binarySearch([1,2,3,4,5,6], 3))"]},{"cell_type":"markdown","metadata":{"id":"QKoZGIow2NkJ"},"source":["Now write this binary search recursive as a challenge . Write function ``binary_search_recursive(li, left, right, key)`` where:\n","\n","- li is a list of numbers sorted in ascending order\n","- left is the left index of the list\n","- right is the right index\n","- key is the element that we are searching for\n","\n","If we find the element, just return its index, otherwise return -1"]},{"cell_type":"code","execution_count":39,"metadata":{"executionInfo":{"elapsed":289,"status":"ok","timestamp":1703024356939,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"0PRcBfDj2NkJ"},"outputs":[{"name":"stdout","output_type":"stream","text":["None\n"]}],"source":["def binary_search_recursive(li, left, right, key):\n","    if left>right:\n","        return -1\n","    mid = (left+right)//2\n","    if li[mid]==key:\n","        return mid\n","    elif li[mid]>key:\n","        return binary_search_recursive(li, left, mid-1, key)\n","    else:\n","        return binary_search_recursive(li, mid+1, right, key)\n","\n","print(binary_search_recursive([1,2,3,4,5,6], 0, 5, 2))"]},{"cell_type":"markdown","metadata":{"id":"Bl82pTGF2NkK"},"source":["## Counting Sort\n","\n","Counting sort is a technique which sorts collections by counting the number of objects."]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1703024361515,"user":{"displayName":"Eren Dere","userId":"14550979863570157458"},"user_tz":-180},"id":"WaBpmvMM2NkK"},"outputs":[],"source":[]}],"metadata":{"colab":{"provenance":[]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.12"}},"nbformat":4,"nbformat_minor":0}
